{"mappings":"AAAA,oBAAoB;AACpB,0EAA0E;AAE1E,oCAAoC;AAEpC,mDAAmD;AACnD,kHAAkH;AAElH,gCAAgC;AAEhC,yBAAyB;AAEzB,0BAA0B;AAE1B,qCAAqC;AACrC,qDAAqD;AAErD,uCAAuC;AACvC,wCAAwC;AAExC,4BAA4B;AAC5B,4DAA4D;AAC5D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,GAEA,MAAM,gBAAgB,AAAC;IACrB,MAAM,QAAO,EAAE;IACf,MAAM,eAAe;IACrB,MAAM,aAAa;IACnB,MAAM,gBAAgB;IAEtB,MAAM,YAAY,SAAU,OAAO,EAAE,QAAQ;QAC3C,MAAK,IAAI,CAAC;YAAE;YAAS;QAAS;QAC9B,QAAQ,GAAG,CAAC,CAAC,EAAE,SAAS,CAAC,EAAE,QAAQ,cAAc,CAAC;IACpD;IAEA,MAAM,aAAa,SAAU,OAAO,EAAE,QAAQ;QAC5C,QAAQ,GAAG,CAAC,CAAC,EAAE,SAAS,IAAI,EAAE,QAAQ,sBAAsB,CAAC;IAC/D;IAEA,OAAO;QACL,MAAA;QACA;QACA;QACA;IACF;AACF;AAEA,cAAc,SAAS,CAAC,SAAS;AACjC,cAAc,SAAS,CAAC,SAAS;AACjC,QAAQ,GAAG,CAAC,cAAc,IAAI;AAC9B,QAAQ,GAAG,CAAC;AAEZ,MAAM,QAAQ;IACZ,MAAM;QACJ;YAAE,SAAS;YAAS,UAAU;QAAE;QAChC;YAAE,SAAS;YAAS,UAAU;QAAE;KACjC;IAED,MAAM;QAAE,YAAY;IAAK;AAC3B;AAEA,MAAM,aAAa,OAAO,MAAM,CAAC,CAAC,GAAG;AACrC,2CAA2C;AAE3C,QAAQ,GAAG,CAAC;AACZ,QAAQ,GAAG,CAAC;AAEZ,WAAW,IAAI,CAAC,UAAU,GAAG;AAE7B,mGAAmG;AACnG,QAAQ,GAAG,CAAC;AACZ,QAAQ,GAAG,CAAC;AACZ,+BAA+B;AAE/B,iDAAiD;AAEjD,+CAA+C;AAE/C,oBAAoB;AACpB,yBAAyB;AACzB,IAAI;AAEJ,MAAM;IACJ,WAAW,MAAM;IACjB,YAAY,IAAI,CAAE;QAChB,IAAI,CAAC,IAAI,GAAG;QACZ,QAAQ,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;IAC9C;AACF;AAEA,MAAM,OAAO,IAAI,OAAO;AAExB,QAAQ,GAAG,CAAC,cAAc;AAE1B,QAAQ,GAAG,CAAC,KAAK,IAAI,CAAC,CAAA,KAAM,GAAG,QAAQ,IAAI","sources":["script.js"],"sourcesContent":["// Importing Modules\r\n// import { addToCart, totalPrice as price, tq } from './shoppingCart.js';\r\n\r\n// console.log('Importing Modules');\r\n\r\n// // Exports are hoisted at the top of the script.\r\n// // hence first \"Exporting Modules\" will be printed in the console and then \"Importing Modules\" will be printed.\r\n\r\n// // console.log(shippingCost);\r\n\r\n// addToCart('bread', 5);\r\n\r\n// console.log(price, tq);\r\n\r\n// importing everything from a module\r\n// import * as ShoppingCart from './shoppingCart.js';\r\n\r\n// ShoppingCart.addToCart('bread', 10);\r\n// console.log(ShoppingCart.totalPrice);\r\n\r\n// importing default exports\r\n// import add, { addToCart, cart } from './shoppingCart.js';\r\n/*\r\nadd('banana', 4);\r\nadd('bread', 5);\r\nadd('apples', 4);\r\n\r\nconsole.log(cart);\r\n\r\n// imports are not copies of the exports they are instead like a live connection. which points to same location in the memory.\r\n\r\n// TOP LEVEL AWAIT: now we can use await keyword outside of an async function atleast in the modules.\r\n\r\n// console.log('Start fetching');\r\n// const res = await fetch('https://jsonplaceholder.typicode.com/users');\r\n// const data = await res.json();\r\n// console.log(data);\r\n\r\n// console.log('Something');\r\n\r\nconst getLastPost = async function () {\r\n  const res = await fetch('https://jsonplaceholder.typicode.com/posts');\r\n  const data = await res.json();\r\n\r\n  return { title: data.at(-1).title, text: data.at(-1).body };\r\n};\r\n\r\nconst lastPost = await getLastPost();\r\nconsole.log(lastPost);\r\n\r\n// Note: Use top level await with care, it can block the code execution of an entire module.\r\n\r\n*/\r\n\r\nconst shoppingCart2 = (function () {\r\n  const cart = [];\r\n  const shippingCost = 10;\r\n  const totalPrice = 237;\r\n  const totalQuantity = 23;\r\n\r\n  const addToCart = function (product, quantity) {\r\n    cart.push({ product, quantity });\r\n    console.log(`${quantity} ${product} added to cart`);\r\n  };\r\n\r\n  const orderStock = function (product, quantity) {\r\n    console.log(`${quantity} of ${product} ordered from supplier`);\r\n  };\r\n\r\n  return {\r\n    cart,\r\n    addToCart,\r\n    totalPrice,\r\n    totalQuantity,\r\n  };\r\n})();\r\n\r\nshoppingCart2.addToCart('bread', 8);\r\nshoppingCart2.addToCart('pizza', 4);\r\nconsole.log(shoppingCart2.cart);\r\nconsole.log(shoppingCart2);\r\n\r\nconst state = {\r\n  cart: [\r\n    { product: 'bread', quantity: 5 },\r\n    { product: 'pizza', quantity: 2 },\r\n  ],\r\n\r\n  user: { isLoggedIn: true },\r\n};\r\n\r\nconst cloneState = Object.assign({}, state);\r\n// const stateDeepClone = cloneDeep(state);\r\n\r\nconsole.log(cloneState);\r\nconsole.log(state);\r\n\r\ncloneState.user.isLoggedIn = false;\r\n\r\n// this is the problem with cloning the object using Object.assign the original object also changes\r\nconsole.log(state);\r\nconsole.log(cloneState);\r\n// console.log(stateDeepClone);\r\n\r\n// lets use external function from lodash library\r\n\r\n// import cloneDeep from 'lodash-es/cloneDeep';\r\n\r\n// if (module.hot) {\r\n//   module.hot.accept();\r\n// }\r\n\r\nclass Person {\r\n  greeting = 'Hey';\r\n  constructor(name) {\r\n    this.name = name;\r\n    console.log(`${this.greeting}, ${this.name}`);\r\n  }\r\n}\r\n\r\nconst mahi = new Person('Mahi');\r\n\r\nconsole.log('Mahendra' ?? null);\r\n\r\nconsole.log(cart.find(el => el.quantity >= 2));\r\n"],"names":[],"version":3,"file":"index.672d4772.js.map","sourceRoot":"/__parcel_source_root/"}