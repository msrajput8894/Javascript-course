{"mappings":"ACsDA,MAAM,EAAiB,WACrB,IAAM,EAAO,EAAE,CAcf,MAAO,CACL,KAAA,EACA,UAXgB,SAAU,CAAO,CAAE,CAAQ,EAC3C,EAAK,IAAI,CAAC,CAAE,QAAA,EAAS,SAAA,CAAS,GAC9B,QAAQ,GAAG,CAAC,CAAC,EAAE,EAAS,CAAC,EAAE,EAAQ,cAAc,CAAC,CACpD,EASE,WAfiB,IAgBjB,cAfoB,EAgBtB,CACF,IAEA,EAAc,SAAS,CAAC,QAAS,GACjC,EAAc,SAAS,CAAC,QAAS,GACjC,QAAQ,GAAG,CAAC,EAAc,IAAI,EAC9B,QAAQ,GAAG,CAAC,GAEZ,MAAM,EAAQ,CACZ,KAAM,CACJ,CAAE,QAAS,QAAS,SAAU,CAAE,EAChC,CAAE,QAAS,QAAS,SAAU,CAAE,EACjC,CAED,KAAM,CAAE,WAAY,CAAA,CAAK,CAC3B,EAEM,EAAa,OAAO,MAAM,CAAC,CAAC,EAAG,GAGrC,QAAQ,GAAG,CAAC,GACZ,QAAQ,GAAG,CAAC,GAEZ,EAAW,IAAI,CAAC,UAAU,CAAG,CAAA,EAG7B,QAAQ,GAAG,CAAC,GACZ,QAAQ,GAAG,CAAC,GAOR,OAAO,GAAG,EACZ,OAAO,GAAG,CAAC,MAAM","sources":["<anon>","script.js"],"sourcesContent":["// Importing Modules\n// import { addToCart, totalPrice as price, tq } from './shoppingCart.js';\n// console.log('Importing Modules');\n// // Exports are hoisted at the top of the script.\n// // hence first \"Exporting Modules\" will be printed in the console and then \"Importing Modules\" will be printed.\n// // console.log(shippingCost);\n// addToCart('bread', 5);\n// console.log(price, tq);\n// importing everything from a module\n// import * as ShoppingCart from './shoppingCart.js';\n// ShoppingCart.addToCart('bread', 10);\n// console.log(ShoppingCart.totalPrice);\n// importing default exports\n// import add, { addToCart, cart } from './shoppingCart.js';\n/*\r\nadd('banana', 4);\r\nadd('bread', 5);\r\nadd('apples', 4);\r\n\r\nconsole.log(cart);\r\n\r\n// imports are not copies of the exports they are instead like a live connection. which points to same location in the memory.\r\n\r\n// TOP LEVEL AWAIT: now we can use await keyword outside of an async function atleast in the modules.\r\n\r\n// console.log('Start fetching');\r\n// const res = await fetch('https://jsonplaceholder.typicode.com/users');\r\n// const data = await res.json();\r\n// console.log(data);\r\n\r\n// console.log('Something');\r\n\r\nconst getLastPost = async function () {\r\n  const res = await fetch('https://jsonplaceholder.typicode.com/posts');\r\n  const data = await res.json();\r\n\r\n  return { title: data.at(-1).title, text: data.at(-1).body };\r\n};\r\n\r\nconst lastPost = await getLastPost();\r\nconsole.log(lastPost);\r\n\r\n// Note: Use top level await with care, it can block the code execution of an entire module.\r\n\r\n*/ const shoppingCart2 = function() {\n    const cart = [];\n    const shippingCost = 10;\n    const totalPrice = 237;\n    const totalQuantity = 23;\n    const addToCart = function(product, quantity) {\n        cart.push({\n            product,\n            quantity\n        });\n        console.log(`${quantity} ${product} added to cart`);\n    };\n    const orderStock = function(product, quantity) {\n        console.log(`${quantity} of ${product} ordered from supplier`);\n    };\n    return {\n        cart,\n        addToCart,\n        totalPrice,\n        totalQuantity\n    };\n}();\nshoppingCart2.addToCart(\"bread\", 8);\nshoppingCart2.addToCart(\"pizza\", 4);\nconsole.log(shoppingCart2.cart);\nconsole.log(shoppingCart2);\nconst state = {\n    cart: [\n        {\n            product: \"bread\",\n            quantity: 5\n        },\n        {\n            product: \"pizza\",\n            quantity: 2\n        }\n    ],\n    user: {\n        isLoggedIn: true\n    }\n};\nconst cloneState = Object.assign({}, state);\n// const stateDeepClone = cloneDeep(state);\nconsole.log(cloneState);\nconsole.log(state);\ncloneState.user.isLoggedIn = false;\n// this is the problem with cloning the object using Object.assign the original object also changes\nconsole.log(state);\nconsole.log(cloneState);\n// console.log(stateDeepClone);\n// lets use external function from lodash library\n// import cloneDeep from 'lodash-es/cloneDeep';\nif (module.hot) module.hot.accept();\n\n//# sourceMappingURL=index.6d563b6d.js.map\n","// Importing Modules\r\n// import { addToCart, totalPrice as price, tq } from './shoppingCart.js';\r\n\r\n// console.log('Importing Modules');\r\n\r\n// // Exports are hoisted at the top of the script.\r\n// // hence first \"Exporting Modules\" will be printed in the console and then \"Importing Modules\" will be printed.\r\n\r\n// // console.log(shippingCost);\r\n\r\n// addToCart('bread', 5);\r\n\r\n// console.log(price, tq);\r\n\r\n// importing everything from a module\r\n// import * as ShoppingCart from './shoppingCart.js';\r\n\r\n// ShoppingCart.addToCart('bread', 10);\r\n// console.log(ShoppingCart.totalPrice);\r\n\r\n// importing default exports\r\n// import add, { addToCart, cart } from './shoppingCart.js';\r\n/*\r\nadd('banana', 4);\r\nadd('bread', 5);\r\nadd('apples', 4);\r\n\r\nconsole.log(cart);\r\n\r\n// imports are not copies of the exports they are instead like a live connection. which points to same location in the memory.\r\n\r\n// TOP LEVEL AWAIT: now we can use await keyword outside of an async function atleast in the modules.\r\n\r\n// console.log('Start fetching');\r\n// const res = await fetch('https://jsonplaceholder.typicode.com/users');\r\n// const data = await res.json();\r\n// console.log(data);\r\n\r\n// console.log('Something');\r\n\r\nconst getLastPost = async function () {\r\n  const res = await fetch('https://jsonplaceholder.typicode.com/posts');\r\n  const data = await res.json();\r\n\r\n  return { title: data.at(-1).title, text: data.at(-1).body };\r\n};\r\n\r\nconst lastPost = await getLastPost();\r\nconsole.log(lastPost);\r\n\r\n// Note: Use top level await with care, it can block the code execution of an entire module.\r\n\r\n*/\r\n\r\nconst shoppingCart2 = (function () {\r\n  const cart = [];\r\n  const shippingCost = 10;\r\n  const totalPrice = 237;\r\n  const totalQuantity = 23;\r\n\r\n  const addToCart = function (product, quantity) {\r\n    cart.push({ product, quantity });\r\n    console.log(`${quantity} ${product} added to cart`);\r\n  };\r\n\r\n  const orderStock = function (product, quantity) {\r\n    console.log(`${quantity} of ${product} ordered from supplier`);\r\n  };\r\n\r\n  return {\r\n    cart,\r\n    addToCart,\r\n    totalPrice,\r\n    totalQuantity,\r\n  };\r\n})();\r\n\r\nshoppingCart2.addToCart('bread', 8);\r\nshoppingCart2.addToCart('pizza', 4);\r\nconsole.log(shoppingCart2.cart);\r\nconsole.log(shoppingCart2);\r\n\r\nconst state = {\r\n  cart: [\r\n    { product: 'bread', quantity: 5 },\r\n    { product: 'pizza', quantity: 2 },\r\n  ],\r\n\r\n  user: { isLoggedIn: true },\r\n};\r\n\r\nconst cloneState = Object.assign({}, state);\r\n// const stateDeepClone = cloneDeep(state);\r\n\r\nconsole.log(cloneState);\r\nconsole.log(state);\r\n\r\ncloneState.user.isLoggedIn = false;\r\n\r\n// this is the problem with cloning the object using Object.assign the original object also changes\r\nconsole.log(state);\r\nconsole.log(cloneState);\r\n// console.log(stateDeepClone);\r\n\r\n// lets use external function from lodash library\r\n\r\n// import cloneDeep from 'lodash-es/cloneDeep';\r\n\r\nif (module.hot) {\r\n  module.hot.accept();\r\n}\r\n"],"names":["shoppingCart2","cart","addToCart","product","quantity","push","console","log","totalPrice","totalQuantity","state","user","isLoggedIn","cloneState","Object","assign","module","hot","accept"],"version":3,"file":"index.6d563b6d.js.map"}